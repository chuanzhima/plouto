package com.smk.pay.core.manager.impl;

import com.smk.pay.account.core.constant.AccountConstant;
import com.smk.pay.account.core.enums.AccountCardTypeEnum;
import com.smk.pay.account.core.enums.AccountChannelEnum;
import com.smk.pay.account.core.enums.AccountInfoStatusEnum;
import com.smk.pay.account.core.enums.AccountLevelEnum;
import com.smk.pay.core.constant.AccountBizConstant;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.dto.TransDetailDto;
import com.smk.pay.core.entity.AccSystemEntity;
import com.smk.pay.core.entity.AccountInfoEntity;
import com.smk.pay.core.entity.PrepaidCardGroupEntity;
import com.smk.pay.core.entity.PrepaidCardInfoEntity;
import com.smk.pay.core.enums.AccountTransTypeEnum;
import com.smk.pay.core.exception.ServiceException;
import com.smk.pay.core.manager.IAccountBaseCommonManager;
import com.smk.pay.core.manager.IAccountBaseManager;
import com.smk.pay.core.manager.IAccountQueryManager;
import com.smk.pay.core.manager.ITransDetailManager;
import com.smk.pay.core.mapper.AccSystemEntityMapper;
import com.smk.pay.core.mapper.AccountInfoEntityMapper;
import com.smk.pay.core.mapper.PrepaidCardGroupEntityMapper;
import com.smk.pay.core.mapper.PrepaidCardInfoEntityMapper;
import com.smk.pay.core.utils.BeanCopierCacheUtil;
import com.smk.pay.core.utils.StringUtil;
import com.smk.pay.dal.condtion.Criteria;
import com.smk.pay.dal.condtion.EntityCondition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/11/3 14:07
 */
@Component("accountBaseManager")
public class AccountBaseManagerImpl implements IAccountBaseCommonManager<AccountInfoDto>, IAccountBaseManager {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountBaseManagerImpl.class);

    @Autowired
    private AccountInfoEntityMapper accountInfoEntityMapper;
    @Autowired
    private IAccountQueryManager accountQueryManager;
    @Autowired
    private AccSystemEntityMapper accSystemEntityMapper;
    @Autowired
    private PrepaidCardGroupEntityMapper prepaidCardGroupEntityMapper;
    @Autowired
    private PrepaidCardInfoEntityMapper prepaidCardInfoEntityMapper;
    @Autowired
    private ITransDetailManager transDetailManager;

    public String addAccount(AccountInfoDto accountInfoDto) {

        AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
        try {
            BeanCopierCacheUtil.copy(accountInfoDto, accountInfoEntity, null);
            accountInfoEntityMapper.insertSelective(accountInfoEntity);
            return String.valueOf(accountInfoEntity.getAccountId());
        } catch (Exception e) {
            LOGGER.error("addAccount exception!accountInfo = " + accountInfoDto, e);
            throw new ServiceException(e);
        }
    }

    public int updateAccountAmountAndStatus(String accountId, String newStatus, AccountInfoDto newAmount) {

        AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
        BeanCopierCacheUtil.copy(newAmount, accountInfoEntity, null);
        accountInfoEntity.setStatus(newStatus);

        Criteria criteria = new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                "ACCOUNT_ID");
        return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                ().addCriteria(criteria));
    }

    public int updateAccountStatus(String accountId, String oldStatus, String newStatus) {
        return 0;
    }

    public int updateAccountLevel(String accountId, String oldLevel, String newLevel) {
        try {
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            accountInfoEntity.setLastUpdateDate(new Date());
            accountInfoEntity.setAccountClass(newLevel);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID").addCriterion("ACCOUNT_CLASS=", newLevel, "ACCOUNT_CLASS")));
        } catch (Exception e) {
            LOGGER.error(String.format("updateAccountLevel exception! accountId={},oldLevel={}," +
                    "newLevel={}", accountId, oldLevel, newLevel), e);
            throw new ServiceException(e);
        }
    }

    public int updateAccountAmount(String accountId, AccountInfoDto oldAmount, AccountInfoDto
            newAmount) {
        try {
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            Criteria criteria = new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID");
            if (oldAmount.getAmount1() != null)
                criteria.addCriterion("AMOUNT1=", oldAmount.getAmount1(), "AMOUNT1");
            else if (oldAmount.getAmount2() != null)
                criteria.addCriterion("AMOUNT2=", oldAmount.getAmount2(), "AMOUNT2");
            else if (oldAmount.getAmount3() != null)
                criteria.addCriterion("AMOUNT3=", oldAmount.getAmount3(), "AMOUNT3");
            else if (oldAmount.getAmount4() != null)
                criteria.addCriterion("AMOUNT4=", oldAmount.getAmount4(), "AMOUNT4");
            else if (oldAmount.getAmount5() != null)
                criteria.addCriterion("AMOUNT5=", oldAmount.getAmount5(), "AMOUNT5");
            else if (oldAmount.getAmount6() != null)
                criteria.addCriterion("AMOUNT6=", oldAmount.getAmount6(), "AMOUNT6");

            BeanCopierCacheUtil.copy(newAmount, accountInfoEntity, null);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(criteria));
        } catch (Exception e) {
            LOGGER.error(String.format("updateAccountAmount exception! accountId={}," +
                    "oldAmount={},newAmount={}", accountId, oldAmount, newAmount), e);
            throw new ServiceException(e);
        }
    }

    public int updateUserId(String accountId, String newUserId) {
        try {
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            accountInfoEntity.setLastUpdateDate(new Date());
            accountInfoEntity.setUserId(newUserId);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID")));
        } catch (Exception e) {
            LOGGER.error(String.format("updateUserId exception! accountId={},userId={}",
                    accountId, newUserId), e);
            throw new ServiceException(e);
        }
    }

    public void merge(String reqSeq, String txtDate, String txtTime, String
            merchantId, String cardNo, String userId, AccountChannelEnum channelEnum) {
        // TODO repeat transaction, card, validate, card relate and so on, refer to account_relation

        List<AccSystemEntity> list = accSystemEntityMapper.selectList(new EntityCondition());
        if (!CollectionUtils.isEmpty(list)) {
            throw new ServiceException(ResultCodeConstant.ACC_SYSTEM_NO_DATA);
        }
        BigDecimal cardLimite = list.get(0).getCardLimite();
        String accDate = list.get(0).getAccDate();

        AccountInfoDto cardAccountInfo = accountQueryManager.queryCardAccountByCardNo(cardNo);
        String cardAccountId = cardAccountInfo.getAccountId();

        BigDecimal cardCGAmount = cardAccountInfo.getAmount1();
        BigDecimal cardXJAmount = cardAccountInfo.getAmount2();
        BigDecimal cardZXZJAmount = cardAccountInfo.getAmount3();
        BigDecimal cardGGKAmount = cardAccountInfo.getAmount4();
        BigDecimal cardLNAmount = cardAccountInfo.getAmount5();

        AccountInfoDto userAccountInfo = accountQueryManager.queryMainAccountByUserId(userId);
        String userAccountId = userAccountInfo.getAccountId();

        BigDecimal userCGAmount = userAccountInfo.getAmount1();
        BigDecimal userXJAmount = userAccountInfo.getAmount2();
        BigDecimal userZXZJAmount = userAccountInfo.getAmount3();
        BigDecimal userGGKAmount = userAccountInfo.getAmount4();
        BigDecimal userLNAmount = userAccountInfo.getAmount5();

        BigDecimal updateCGAmount = new BigDecimal(0);
        BigDecimal updateXJAmount = new BigDecimal(0);
        BigDecimal updateZXZJAmount = new BigDecimal(0);
        BigDecimal updateGGKAmount = new BigDecimal(0);
        BigDecimal updateLNAmount = new BigDecimal(0);

        // 现金资金转移
        if (userXJAmount.add(userGGKAmount).add(cardXJAmount).compareTo(cardLimite) < 0) {
            updateXJAmount = userXJAmount.add(cardXJAmount);
        } else {
            updateXJAmount = cardLimite;
            updateCGAmount = userCGAmount.add(cardXJAmount.add(userXJAmount).subtract(cardLimite));
            updateGGKAmount = new BigDecimal(0);
        }

        // 刮刮卡转移
        if (updateXJAmount.add(updateGGKAmount).add(cardGGKAmount).compareTo(cardLimite) < 0) {
            updateGGKAmount = updateGGKAmount.add(cardGGKAmount);
        } else {
            updateGGKAmount = cardLimite.subtract(updateXJAmount);
            updateZXZJAmount = updateZXZJAmount.add(updateGGKAmount.add(cardGGKAmount).add
                    (updateXJAmount).subtract(cardLimite));
        }

        // 常规转移
        updateCGAmount = userCGAmount.add(cardCGAmount);
        // 专项资金转移
        updateZXZJAmount = userZXZJAmount.add(cardZXZJAmount);
        // 老年账户转移
        updateLNAmount = userLNAmount.add(cardLNAmount);

        this.updateAccountAmount(userAccountId, cardAccountInfo, new AccountInfoDto.Builder()
                .amount1(updateCGAmount).amount2(updateXJAmount).amount3(updateZXZJAmount)
                .amount4(updateGGKAmount).amount5(updateLNAmount).build());

        this.updateAccountAmountAndStatus(cardAccountId, AccountInfoStatusEnum.BINDED.value(),
                new AccountInfoDto.Builder().amount1(new BigDecimal(0)).amount2(new BigDecimal(0))
                .amount3(new BigDecimal(0)).amount4(new BigDecimal(0)).amount5(new BigDecimal(0))
                .build());

        PrepaidCardInfoEntity cardInfoEntity = prepaidCardInfoEntityMapper.selectByCardNo(cardNo);
        String prepaidCardId = cardInfoEntity.getPrepaidCardId();

        prepaidCardGroupEntityMapper.updateStatusByCardIdStatus(prepaidCardId,
                AccountBizConstant
                .PREPAID_CARD_GROUP_STATUS_NORMAL, AccountBizConstant
                .PREPAID_CARD_GROUP_STATUS_BINDED);

        int count = prepaidCardGroupEntityMapper.count(new EntityCondition().addCriteria(new
                Criteria()
                .addCriterion("PREPAID_ACCOUNT_ID=", userAccountId, "PREPAID_ACCOUNT_ID")
                .addCriterion("STATUS=", AccountBizConstant.PREPAID_CARD_GROUP_STATUS_NORMAL,
                        "STATUS")));

        if (count == 0) {
            PrepaidCardGroupEntity groupEntity = new PrepaidCardGroupEntity(prepaidCardId,
                    StringUtil.EMPTY, userAccountId, AccountBizConstant.PREPAID_CARD_GROUP_STATUS_NORMAL);
            prepaidCardGroupEntityMapper.insertSelective(groupEntity);
        }

        this.updateAccountStatus(cardAccountId, AccountInfoStatusEnum.NORMAL.value(),
                AccountInfoStatusEnum.BINDED.value());

        if (AccountInfoStatusEnum.UNACTIVATED.value().equals(userAccountInfo.getStatus())) {
            this.updateAccountStatus(userAccountId, AccountInfoStatusEnum.UNACTIVATED.value(),
                    AccountInfoStatusEnum.NORMAL.value());
        }

        TransDetailDto transDetailDto = new TransDetailDto.Builder().serialNo(StringUtil.randomSequence())
                .transId(AccountBizConstant.TRANS_DETAIL_TRANS_ID_1).transType
                        (AccountTransTypeEnum.PREPAID_CARD_RELATE.key()).accountId
                        (userAccountId).accountClass(AccountLevelEnum.FIRST.value()).rivalAccount
                        (cardAccountId).rivalAccountClass(AccountLevelEnum.SECOND.value()).reqSerialNo
                        (reqSeq).reqTransDate(txtDate).reqTransTime(txtTime).transDate(new Date())
                .status(AccountBizConstant.TRANS_DETAIL_STATUS_1).accDate(accDate)
                .replacementFlag(AccountBizConstant.TRANS_DETAIL_REPLACEMENT_FLAG_0).amount1
                        (cardCGAmount).amount2(cardXJAmount).amount3(cardZXZJAmount).amount4
                        (cardGGKAmount).amount5(cardLNAmount).amount11(updateCGAmount).amount12
                        (updateXJAmount).amount13(updateZXZJAmount).amount14(updateGGKAmount)
                .amount15(updateLNAmount).channel(channelEnum.name()).userDefindMark
                        (AccountBizConstant.TRANS_DETAIL_USER_DEFIND_MARK_0).merchantId
                        (merchantId).build();
        transDetailManager.addTransDetail(transDetailDto);
    }
}
