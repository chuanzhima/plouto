package com.smk.pay.core.validator;

import com.smk.pay.account.core.enums.AccountInfoStatusEnum;
import com.smk.pay.account.core.request.OpenAccountCreditRequest;
import com.smk.pay.account.core.request.RequestHeader;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.enums.AccountTransTypeEnum;
import com.smk.pay.core.validator.base.AccountValidator;
import com.smk.pay.core.validator.base.PrepaidCardValidator;
import com.smk.pay.core.validator.base.TransValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/12/21 14:59
 */
@Component("creditValidator")
public class CreditValidator {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditValidator.class);
    @Autowired
    private AccountValidator accountValidator;
    @Autowired
    private TransValidator transValidator;
    @Autowired
    private PrepaidCardValidator prepaidCardValidator;

    public Map<Boolean, List<String>> validate(RequestHeader header, OpenAccountCreditRequest request) {

        Map<Boolean, List<String>> validateMap = new HashMap<Boolean, List<String>>() {{
            put(Boolean.TRUE, Arrays.asList(ResultCodeConstant.SUCCESS));
        }};

        // 校验重复交易
        Boolean isRepeat = transValidator.isRepeatTrans(header.getReqSeq(), header.getTxDate
                (), header.getTxTime(), AccountTransTypeEnum.CREDIT_OPEN.key(), AccountInfoStatusEnum
                .NORMAL.value());
        if (isRepeat) {
            LOGGER.warn("CreditValidator validate result: sequence-no repeat,no=" + header.getReqSeq());
            return new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(ResultCodeConstant.REPEAT_TRANS_SEQUENCE_NO));
            }};
        }

        String custId = request.getCustId();
        final Map<Boolean, String> cardMap = prepaidCardValidator.isBindCard(custId);
        if (cardMap.containsKey(Boolean.FALSE)) {
            new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(cardMap.get(Boolean.FALSE)));
            }};
        }
        String cardNo = cardMap.get(Boolean.TRUE);

        final Map<Boolean, List<String>> accountMap = accountValidator.isValidAccountByCustId(custId, null, Arrays.asList
                (AccountInfoStatusEnum.NORMAL.value()));

        if (accountMap.containsKey(Boolean.FALSE)) {
            new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(accountMap.get(Boolean.FALSE).get(0)));
            }};
        }


//        accountValidator.isValidAccount(request.getCustId())

//        Map<Boolean, List<String>> accountMap = accountValidator.isValidMerchantAccount(merchantId,
//                null, Arrays.asList(AccountInfoStatusEnum.NORMAL.value()));
//
//        if (accountMap.containsKey(Boolean.FALSE)) {
//            final String resultVal = accountMap.get(Boolean.FALSE).get(0);
//            LOGGER.warn("validate4Merchant result: account invalid,no=" + header.getReqSeq());
//            return new HashMap<Boolean, String>() {{
//                put(Boolean.FALSE, resultVal);
//            }};
//        }
//        validateMap.put(Boolean.TRUE, accountMap.get(Boolean.TRUE).get(0));
        return validateMap;
    }

}
