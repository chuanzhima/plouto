package com.smk.pay.core.manager.base.impl;

import com.smk.pay.account.core.enums.AccountTypeEnum;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.entity.AccountInfoEntity;
import com.smk.pay.core.exception.DBException;
import com.smk.pay.core.exception.ServiceException;
import com.smk.pay.core.manager.base.IAccountInfoManager;
import com.smk.pay.core.mapper.AccountInfoEntityMapper;
import com.smk.pay.core.utils.BeanCopierCacheUtil;
import com.smk.pay.dal.condtion.Criteria;
import com.smk.pay.dal.condtion.EntityCondition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import java.util.Date;
import java.util.List;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/11/25 14:17
 */
@Component(value = "accountInfoManager")
public class AccountInfoManagerImpl implements IAccountInfoManager<AccountInfoDto> {

    @Autowired
    private AccountInfoEntityMapper accountInfoEntityMapper;

    public String addAccount(AccountInfoDto accountInfoDto) {
        AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
        try {
            BeanCopierCacheUtil.copy(accountInfoDto, accountInfoEntity, null);
            accountInfoEntityMapper.insertSelective(accountInfoEntity);
            return String.valueOf(accountInfoEntity.getAccountId());
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public int updateAccountStatus(String accountId, String oldStatus, String newStatus) {
        return 0;
    }

    public int updateAccountLevel(String accountId, String oldLevel, String newLevel) {
        try {
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            accountInfoEntity.setLastUpdateDate(new Date());
            accountInfoEntity.setAccountClass(newLevel);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID").addCriterion("ACCOUNT_CLASS=", newLevel, "ACCOUNT_CLASS")));
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public int updateAccountAmount(String accountId, AccountInfoDto oldAmount, AccountInfoDto newAmount) {
        try {

            newAmount.setLastUpdateDate(new Date());
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            Criteria criteria = new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID");
            if (oldAmount.getAmount1() != null)
                criteria.addCriterion("AMOUNT1=", oldAmount.getAmount1(), "AMOUNT1");
            else if (oldAmount.getAmount2() != null)
                criteria.addCriterion("AMOUNT2=", oldAmount.getAmount2(), "AMOUNT2");
            else if (oldAmount.getAmount3() != null)
                criteria.addCriterion("AMOUNT3=", oldAmount.getAmount3(), "AMOUNT3");
            else if (oldAmount.getAmount4() != null)
                criteria.addCriterion("AMOUNT4=", oldAmount.getAmount4(), "AMOUNT4");
            else if (oldAmount.getAmount5() != null)
                criteria.addCriterion("AMOUNT5=", oldAmount.getAmount5(), "AMOUNT5");
            else if (oldAmount.getAmount6() != null)
                criteria.addCriterion("AMOUNT6=", oldAmount.getAmount6(), "AMOUNT6");

            BeanCopierCacheUtil.copy(newAmount, accountInfoEntity, null);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(criteria));
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public int updateAccountAmountAndStatus(String accountId, String newStatus, AccountInfoDto newAmount) {
        newAmount.setLastUpdateDate(new Date());
        AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
        BeanCopierCacheUtil.copy(newAmount, accountInfoEntity, null);
        accountInfoEntity.setStatus(newStatus);

        Criteria criteria = new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                "ACCOUNT_ID");
        try {
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(criteria));
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public int updateUserId(String accountId, String newUserId) {
        try {
            AccountInfoEntity accountInfoEntity = new AccountInfoEntity();
            accountInfoEntity.setLastUpdateDate(new Date());
            accountInfoEntity.setUserId(newUserId);
            return accountInfoEntityMapper.updateSelective(accountInfoEntity, new EntityCondition
                    ().addCriteria(new Criteria().addCriterion("ACCOUNT_ID=", accountId,
                    "ACCOUNT_ID")));
        } catch (Exception e) {
            throw new DBException(e);
        }
    }


    public AccountInfoDto queryMainAccountByUserId(String userId) {
        Criteria criteria = new Criteria();
        criteria.addCriterion("USER_ID = ", userId, "USER_ID")
                .addCriterion("ACCOUNT_TYPE = ", AccountTypeEnum.ONLINE.value(), "ACCOUNT_TYPE");

        AccountInfoDto accountInfoDto = null;
        try {
            List<AccountInfoEntity> accountInfoEntityList = accountInfoEntityMapper.selectList(new
                    EntityCondition()
                    .addCriteria(criteria));
            if (CollectionUtils.isEmpty(accountInfoEntityList)) {
                return accountInfoDto;
            }
            accountInfoDto = new AccountInfoDto.Builder().build();
            AccountInfoEntity accountInfoEntity = accountInfoEntityList.get(0);
            BeanCopierCacheUtil.copy(accountInfoEntity, accountInfoDto, null);
        } catch (Exception e) {
            throw new DBException(e);
        }
        return accountInfoDto;
    }


    public AccountInfoDto queryAccountById(String accountId) {
        try {
            AccountInfoEntity accountInfoEntity = accountInfoEntityMapper.selectByPrimaryKey(accountId);
            AccountInfoDto accountInfoDto = new AccountInfoDto.Builder().build();
            BeanCopierCacheUtil.copy(accountInfoEntity, accountInfoDto, null);
            return accountInfoDto;
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public AccountInfoDto queryCardAccountByCardNo(String cardNo) {
        try {
            AccountInfoDto accountInfoDto = new AccountInfoDto.Builder().build();
            AccountInfoEntity accountInfoEntity = accountInfoEntityMapper.selectCardAccountByCardNo(cardNo);
            BeanCopierCacheUtil.copy(accountInfoEntity, accountInfoDto, null);
            return accountInfoDto;
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

}
