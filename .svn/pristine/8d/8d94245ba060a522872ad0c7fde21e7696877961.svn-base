package com.smk.pay.core.manager.impl;

import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.enums.AccountInfoStatusEnum;
import com.smk.pay.core.exception.ServiceException;
import com.smk.pay.core.manager.IAccountQueryManager;
import com.smk.pay.core.validator.AccountValidator;
import com.smk.pay.core.validator.UserValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/10/31 15:55
 */
@Service("accountOnlineMngManager")
public class AccountOnlineMngManagerImpl extends AbstractAccountMngManager {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountOnlineMngManagerImpl.class);
    @Autowired
    private IAccountQueryManager accountQueryManager;
    @Autowired
    private UserValidator userValidator;
    @Autowired
    private AccountValidator accountValidator;

    @Override
    protected Map<Boolean, String> check(String value, List<String> invalidStatus, List<String>
            validStatus) {
        Map<Boolean, String> validMap;
        try {
            if (!userValidator.isUserExistOrNormal(value)) {
                LOGGER.warn("checkFreeze user not exist or not normal! userId=" + value);
                return new HashMap<Boolean, String>() {{
                    put(Boolean.FALSE, ResultCodeConstant.USER_INVALID);
                }};
            }
            validMap = accountValidator.isValidAccount(value,
                    invalidStatus, validStatus);
            if (validMap.containsKey(Boolean.FALSE)) {
                return validMap;
            }
        } catch (ServiceException e) {
            LOGGER.error("checkFreeze exception, value=" + value, e);
            return new HashMap<Boolean, String>() {{
                put(Boolean.FALSE, ResultCodeConstant.SYSTEM_ERROR);
            }};
        }
        return validMap;
    }

}