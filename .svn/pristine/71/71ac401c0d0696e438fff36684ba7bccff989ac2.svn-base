package com.smk.pay.core.manager.impl;

import com.smk.pay.core.dto.TransDetailDto;
import com.smk.pay.core.entity.TransDetailEntity;
import com.smk.pay.core.exception.ServiceException;
import com.smk.pay.core.manager.ITransDetailManager;
import com.smk.pay.core.mapper.TransDetailEntityMapper;
import com.smk.pay.core.utils.BeanCopierCacheUtil;
import com.smk.pay.dal.condtion.Criteria;
import com.smk.pay.dal.condtion.EntityCondition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import java.util.Date;
import java.util.List;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/11/11 16:52
 */
@Component(value = "transDetailManager")
public class TransDetailManager implements ITransDetailManager {

    @Autowired
    private TransDetailEntityMapper transDetailEntityMapper;

    public int addTransDetail(TransDetailDto transDetailDto) {
        try {
            TransDetailEntity transDetailEntity = new TransDetailEntity();
            BeanCopierCacheUtil.copy(transDetailDto, transDetailEntity, null);
            return transDetailEntityMapper.insertSelective(transDetailEntity);
        } catch (Exception e) {
            throw new ServiceException(e);
        }
    }

    public TransDetailDto querySumAccount(String transType, String transId, String accountId,
                                          Date fromTransDate, Date toTransDate) {

        TransDetailDto transDetailDto = new TransDetailDto.Builder().build();
        TransDetailEntity transDetailEntity = transDetailEntityMapper.selectSumAmount(new EntityCondition()
                .addCriteria(new Criteria()
                        .addCriterion("TRANS_TYPE=", transType, "TRANS_TYPE").addCriterion("TRANS_ID=",
                                transId, "TRANS_ID").addCriterion("ACCOUNT_ID=", accountId, "ACCOUNT_ID")
                        .addCriterion("TRANS_DATE BETWEEN ", fromTransDate, toTransDate, "TRANS_DATE")));
        BeanCopierCacheUtil.copy(transDetailEntity, transDetailDto, null);
        return transDetailDto;
    }

    public TransDetailDto querySumAccount(List<String> transTypes, String accountId,
                                          Date fromTransDate, Date toTransDate, String status) {

        TransDetailDto transDetailDto = new TransDetailDto.Builder().build();
        Criteria criteria = new Criteria().addCriterion("TRANS_TYPE IN", transTypes, "TRANS_TYPE").addCriterion("STATUS=", status, "STATUS").addCriterion("ACCOUNT_ID=", accountId, "ACCOUNT_ID").addCriterion("TRANS_TYPE IN", transTypes, "TRANS_TYPE");
        if (fromTransDate != null && toTransDate != null) {
            criteria.addCriterion("TRANS_DATE BETWEEN ", fromTransDate, toTransDate,
                    "TRANS_DATE");
        }

        TransDetailEntity transDetailEntity = transDetailEntityMapper.selectSumAmount(new EntityCondition()
                .addCriteria(criteria));
        BeanCopierCacheUtil.copy(transDetailEntity, transDetailDto, null);
        return transDetailDto;
    }

    public Boolean isRepeatTrans(String ... params) {

        String requestSequence = params[0];
        String requestTransDate = params[1];
        String requestTransTime = params[2];
        String transType = params[3];
        String status = params[4];
        List<TransDetailEntity> transDetailEntityList = transDetailEntityMapper.selectList(new
                EntityCondition().addCriteria(new Criteria()
                        .addCriterion("TRANS_TYPE=", transType, "TRANS_TYPE").addCriterion("REQ_SERIAL_NO=",
                                requestSequence, "REQ_SERIAL_NO").addCriterion("REQ_TRANS_DATE=", requestTransDate, "REQ_TRANS_DATE")
                        .addCriterion("STATUS=", status, "STATUS")));
        return !CollectionUtils.isEmpty(transDetailEntityList);

    }
}
