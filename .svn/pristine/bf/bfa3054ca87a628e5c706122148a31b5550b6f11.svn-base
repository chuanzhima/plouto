package com.smk.pay.core.validator;

import com.smk.pay.account.core.enums.AccountInfoStatusEnum;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.manager.IAccountQueryManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import java.util.*;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/10/25 18:10
 */
@Component("accountValidator")
public class AccountValidator {

    private final static Logger LOGGER = LoggerFactory.getLogger(AccountValidator.class);
    @Autowired
    private IAccountQueryManager accountQueryManager;

    public Map<Boolean, List<String>> isValidAccount(String userId, List<String>
            invalidStatus, List<String> validStatus) {
        if (StringUtils.isEmpty(userId))
            return null;
        final AccountInfoDto accountInfoDto = accountQueryManager.getAccountByUserId(userId);

        if (null == accountInfoDto) {
            LOGGER.warn("isValidAccount account not exist, userId=" + userId);
            return new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(ResultCodeConstant.ACCOUNT_NOT_EXIST));
            }};
        }
        if (!CollectionUtils.isEmpty(invalidStatus) && invalidStatus.contains(accountInfoDto
                .getStatus())) {
            LOGGER.warn("isValidAccount account status invalid, userId={},status={}", new
                    String[]{userId, accountInfoDto.getStatus()});
            return new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(ResultCodeConstant.ACCOUNT_STATUS_PREFIX +
                        AccountInfoStatusEnum.valueOf(accountInfoDto.getStatus()).name()));
            }};
        }
        if (!CollectionUtils.isEmpty(validStatus) && !validStatus.contains(accountInfoDto
                .getStatus())) {
            LOGGER.warn("isValidAccount account status invalid, userId={},status={}", new
                    String[]{userId, accountInfoDto.getStatus()});
            return new HashMap<Boolean, List<String>>() {{
                put(Boolean.FALSE, Arrays.asList(ResultCodeConstant.ACCOUNT_STATUS_INVALID));
            }};
        }
        return new HashMap<Boolean, List<String>>() {{
            put(Boolean.TRUE, Arrays.asList(accountInfoDto.getAccountId(), accountInfoDto
                    .getStatus(), accountInfoDto.getAccountClass()));
        }};
    }
}
