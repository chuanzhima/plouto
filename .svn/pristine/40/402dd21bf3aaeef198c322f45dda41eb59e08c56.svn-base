package com.smk.pay.core.api;

import com.smk.pay.account.core.enums.AccountChannelEnum;
import com.smk.pay.account.core.enums.AccountFundFlowEnum;
import com.smk.pay.account.core.enums.AccountTypeEnum;
import com.smk.pay.account.core.request.RequestHeader;
import com.smk.pay.account.core.response.RpcResponse;
import com.smk.pay.account.core.service.IAccountWithdrawService;
import com.smk.pay.core.annotations.DubboServiceLog;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.manager.IAccountWithdrawManager;
import com.smk.pay.core.utils.PropertiesUtil;
import com.smk.pay.core.utils.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/11/29 16:53
 */
@Service(value = "accountWithdrawService")
public class AccountWithdrawService implements IAccountWithdrawService {

    @Autowired
    private IAccountWithdrawManager accountWithdrawManager;
    @DubboServiceLog
    @Override
    public RpcResponse<String> withdraw(RequestHeader header, AccountChannelEnum channelEnum, String merchantId,
                                        AccountTypeEnum typeEnum, String typeValue, AccountFundFlowEnum fundFlowEnum,
                                        BigDecimal amount, String bankId) {

        if (header == null || channelEnum == null || typeEnum == null || amount ==  null
                || amount.compareTo(new BigDecimal(0)) < 0 ||  fundFlowEnum == null ||
                StringUtil.isEmpty(header.getReqSeq(), header.getTxDate(), header.getTxTime(), merchantId, typeValue,
                        bankId)) {
            return new RpcResponse<>(Boolean.FALSE, ResultCodeConstant
                    .PARAMETER_INVALID, PropertiesUtil.LOCALE_PROPERTIES_Map.get(ResultCodeConstant
                    .PARAMETER_INVALID));
        }
        accountWithdrawManager.withdraw(header, channelEnum, merchantId, typeEnum, typeValue, fundFlowEnum, amount, bankId);
        return new RpcResponse<>(Boolean.TRUE, ResultCodeConstant.SUCCESS, PropertiesUtil.LOCALE_PROPERTIES_Map.get
                (ResultCodeConstant.SUCCESS));
    }
}
