package com.smk.pay.core.api;

import com.smk.pay.account.core.enums.AccountChannelEnum;
import com.smk.pay.account.core.enums.AccountInvokerEnum;
import com.smk.pay.account.core.enums.AccountLevelEnum;
import com.smk.pay.account.core.enums.AccountTypeEnum;
import com.smk.pay.account.core.request.MigrateAccountRequest;
import com.smk.pay.account.core.request.OpenAccountRequest;
import com.smk.pay.account.core.request.RequestHeader;
import com.smk.pay.account.core.response.RpcResponse;
import com.smk.pay.account.core.service.IAccountMngService;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.manager.IAccountMngManager;
import com.smk.pay.core.utils.PropertiesUtil;
import com.smk.pay.core.utils.StringUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/10/24 9:57
 */
@Service(value = "accountMngService")
public class AccountMngService implements IAccountMngService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountMngService.class);

    @Autowired
    @Qualifier("accountOnlineMngManager")
    private IAccountMngManager accountOnlineMngManager;


    public RpcResponse<String> openAccount(OpenAccountRequest openAccountRequest,
                                           AccountTypeEnum typeEnum) {
        RpcResponse<String> rpcResponse = new RpcResponse<String>(Boolean.FALSE);
        // 当个人开户时，个人开户信息不能为空，当商户开户时，商户信息不能为空
        if (openAccountRequest == null || typeEnum == null ||
                (openAccountRequest.getUserCls().equals(OpenAccountRequest.OPEN_ACCOUNT_PERSONAL)
                        && (StringUtil.isEmpty(openAccountRequest.getCustCredentialNo(),
                        openAccountRequest.getCustCredentialType(), openAccountRequest.getCustId
                                (), openAccountRequest.getCustName()))) || (openAccountRequest
                .getUserCls().equals(OpenAccountRequest.OPEN_ACCOUNT_MERCHANT) && (StringUtil
                .isEmpty(openAccountRequest.getMerchantNo(), openAccountRequest.getCustName()))
        )) {
            rpcResponse = new RpcResponse<String>(Boolean.FALSE, ResultCodeConstant
                    .PARAMETER_INVALID, PropertiesUtil.LOCALE_PROPERTIES_Map.get(ResultCodeConstant
                    .PARAMETER_INVALID));
            return rpcResponse;
        }
        if (typeEnum == AccountTypeEnum.ONLINE) {
            Map<Boolean, String> resultMap = accountOnlineMngManager.openAccount(openAccountRequest);
            if (resultMap.containsKey(Boolean.FALSE)) {
                rpcResponse = new RpcResponse<String>(Boolean.FALSE, resultMap.get(Boolean.FALSE),
                        PropertiesUtil.LOCALE_PROPERTIES_Map.get(resultMap.get(Boolean.FALSE)));
            } else {
                rpcResponse = new RpcResponse<String>(resultMap.get(Boolean.TRUE), Boolean.TRUE);
            }
        }
        return rpcResponse;
    }


    public RpcResponse<String> alterAccountLevel(String value, AccountLevelEnum levelEnum,
                                                 AccountTypeEnum typeEnum) {
        RpcResponse<String> rpcResponse = new RpcResponse<String>(Boolean.FALSE);
        if (StringUtil.isEmpty(value) || typeEnum == null) {
            rpcResponse = new RpcResponse<String>(Boolean.FALSE, ResultCodeConstant
                    .PARAMETER_INVALID, PropertiesUtil.LOCALE_PROPERTIES_Map.get(ResultCodeConstant
                    .PARAMETER_INVALID));
            return rpcResponse;
        }
        if (typeEnum == AccountTypeEnum.ONLINE) {
            String result = accountOnlineMngManager.alterAccountLevel(value, levelEnum
                    );
            rpcResponse = new RpcResponse<String>(ResultCodeConstant.SUCCESS.equals(result),
                    result, PropertiesUtil.LOCALE_PROPERTIES_Map.get(result));
        }

        return rpcResponse;
    }

    public RpcResponse<String> closeAccount(String value, AccountTypeEnum typeEnum) {
        return null;
    }

    public RpcResponse<String> bindAccount(RequestHeader header, String userId, String cardNo, String merchantId, AccountChannelEnum channelEnum) {
        return null;
    }

    public RpcResponse<String> migrateAccount(RequestHeader header, String merchantId, AccountChannelEnum channelEnum, MigrateAccountRequest request) {
        return null;
    }
}
