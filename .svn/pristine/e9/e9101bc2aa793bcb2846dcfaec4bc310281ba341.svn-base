package com.smk.pay.core.manager.atom.impl;

import com.smk.pay.core.constant.AccountBizConstant;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.entity.InternalAccountModifyDetailEntity;
import com.smk.pay.core.manager.atom.IReverse;
import com.smk.pay.core.manager.base.IAccountInfoManager;
import com.smk.pay.core.mapper.InternalAccountModifyDetailEntityMapper;
import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.Resource;
import java.math.BigDecimal;

/**
 * 余额消费(账户直付)冲正，对应原交易trans_type = '04'
 *
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/12/14 15:42
 */
public class Reverse4AccountDirPay implements IReverse{

    @Resource(name = "accountInfoManager")
    private IAccountInfoManager accountInfoManager;
    @Autowired
    private InternalAccountModifyDetailEntityMapper internalAccountModifyDetailEntityMapper;

    @Override
    public void reverse(AccountInfoDto accountInfoDto, String transDetailSeq, String originalSeq, String
            originalDate, String originalTime,
                        String sequence, String accDate, BigDecimal... amounts) {

        AccountInfoDto newAccount = new AccountInfoDto.Builder().amount1(accountInfoDto.getAmount1().add
                (amounts[0])).amount2(accountInfoDto.getAmount2().add(amounts[1])).amount3(accountInfoDto
                .getAmount3().add(amounts[2])).amount4(accountInfoDto.getAmount4().add(amounts[3])).amount5
                (accountInfoDto.getAmount5().add(amounts[4])).amount6(accountInfoDto.getAmount6().add
                (amounts[5])).build();
        accountInfoManager.updateAccountAmount(accountInfoDto.getAccountId().toString(), new AccountInfoDto.Builder().amount1
                (accountInfoDto.getAmount1()).build(), newAccount);

        InternalAccountModifyDetailEntity detailEntity = new InternalAccountModifyDetailEntity(sequence,
                "10000002", amounts[0].add(amounts[1]).add(amounts[2]).add(amounts[3]).add(amounts[4]).add(amounts[5]),
                AccountBizConstant.FUND_DIRECTION_OUT, accDate);
        internalAccountModifyDetailEntityMapper.insertSelective(detailEntity);
    }
}
