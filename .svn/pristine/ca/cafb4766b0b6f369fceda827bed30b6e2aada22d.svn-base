package com.smk.pay.core.validator.base;

import com.smk.pay.account.core.enums.AccountCardTypeEnum;
import com.smk.pay.core.constant.AccountBizConstant;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.entity.PrepaidCardInfoEntity;
import com.smk.pay.core.exception.DBException;
import com.smk.pay.core.manager.base.IAccountInfoManager;
import com.smk.pay.core.manager.base.impl.UserInfoManagerImpl;
import com.smk.pay.core.mapper.PrepaidCardInfoEntityMapper;
import com.smk.pay.core.mapper.ZXCardProvideEntityMapper;
import com.smk.pay.core.utils.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.Map;

/**
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/11/29 10:48
 */
@Component(value = "prepaidCardValidator")
public class PrepaidCardValidator {

    @Resource(name = "accountInfoManager")
    private IAccountInfoManager accountInfoManager;
    @Autowired
    private PrepaidCardInfoEntityMapper prepaidCardInfoEntityMapper;
    @Autowired
    private UserInfoManagerImpl userInfoManager;

    @Autowired
    private ZXCardProvideEntityMapper zxCardProvideEntityMapper;

    public AccountInfoDto isValidCard(String cardNo) {
        try {
            return accountInfoManager.queryCardAccountByCardNo(cardNo);
        } catch (Exception e) {
            throw new DBException(e);
        }
    }

    public Map<Boolean, String> isBindCard(String custId) {

        String userId = userInfoManager.getUserIdByCustId(custId);
        if (StringUtil.isEmpty(userId)) {
            return new HashMap<Boolean, String>() {{
                put(Boolean.FALSE, ResultCodeConstant.USER_MAPPING_NOT_EXIST);
            }};
        }
        final PrepaidCardInfoEntity cardInfoEntity = prepaidCardInfoEntityMapper.selectByUserIdAndCardType(userId,
                AccountCardTypeEnum.HZSMK.name());
        if (null == cardInfoEntity) {
            return new HashMap<Boolean, String>() {{
                put(Boolean.FALSE, ResultCodeConstant.USER_NOT_BIND_CARD);
            }};
        }
        if (!AccountBizConstant.PREPAID_CARD_INFO_STATUS_NORMAL.equals(cardInfoEntity.getStatus())) {
            return new HashMap<Boolean, String>() {{
                put(Boolean.FALSE, ResultCodeConstant.CARD_STATUS_INVALID);
            }};
        }

        return new HashMap<Boolean, String>() {{
            put(Boolean.TRUE, cardInfoEntity.getPrepaidCardNo());
        }};
    }

    public Boolean isForbiddenCard(String cardNumber) {
        return zxCardProvideEntityMapper.cardCount(cardNumber) > 0;
    }
}
