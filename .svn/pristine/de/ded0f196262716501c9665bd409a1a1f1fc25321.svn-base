package com.smk.pay.core.manager.base.impl;

import com.smk.pay.account.core.enums.AccountTypeEnum;
import com.smk.pay.core.constant.ResultCodeConstant;
import com.smk.pay.core.dto.AccountInfoDto;
import com.smk.pay.core.dto.MerchantAccountInfoDto;
import com.smk.pay.core.entity.AccountInfoEntity;
import com.smk.pay.core.entity.MerchantAccountInfoEntity;
import com.smk.pay.core.entity.UserMappingEntity;
import com.smk.pay.core.exception.DBException;
import com.smk.pay.core.exception.ServiceException;
import com.smk.pay.core.manager.base.IAccountInfoManager;
import com.smk.pay.core.mapper.MerchantAccountInfoEntityMapper;
import com.smk.pay.core.utils.BeanCopierCacheUtil;
import com.smk.pay.dal.condtion.Criteria;
import com.smk.pay.dal.condtion.EntityCondition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import java.util.List;

/**
 * 商户账户管理
 *
 * Project plouto
 * Created by chuanzhi.macz
 * Date 2016/12/16 15:09
 */
public class MerchantAccountManagerImpl implements IAccountInfoManager<MerchantAccountInfoDto> {

    @Autowired
    private MerchantAccountInfoEntityMapper merchantAccountInfoEntityMapper;

    @Override
    public String addAccount(MerchantAccountInfoDto merchantAccountInfoDto) {
        return null;
    }

    @Override
    public int updateAccountStatus(String accountId, String oldStatus, String newStatus) {
        return 0;
    }

    @Override
    public int updateAccountLevel(String accountId, String oldLevel, String newLevel) {
        return 0;
    }

    @Override
    public int updateAccountAmount(String accountId, MerchantAccountInfoDto oldAmount, MerchantAccountInfoDto newAmount) {
        return 0;
    }

    @Override
    public int updateAccountAmountAndStatus(String accountId, String newStatus, MerchantAccountInfoDto newAmount) {
        return 0;
    }

    @Override
    public int updateUserId(String accountId, String newUserId) {
        return 0;
    }

    @Override
    public MerchantAccountInfoDto queryMainAccountByBizId(String bizId) {
        try {
            MerchantAccountInfoEntity merchantAccountInfoEntity = merchantAccountInfoEntityMapper.selectAccountByMerchantId(bizId);
            if (merchantAccountInfoEntity == null)
                throw new ServiceException(ResultCodeConstant.USER_MAPPING_NOT_EXIST);

            MerchantAccountInfoDto merchantAccountInfoDto = new MerchantAccountInfoDto();
            BeanCopierCacheUtil.copy(merchantAccountInfoEntity, merchantAccountInfoDto, null);
            return merchantAccountInfoDto;
        } catch (ServiceException e) {
            throw new DBException(e);
        }
    }

    @Override
    public MerchantAccountInfoDto queryAccountById(String accountId) {
        return null;
    }

    @Override
    public MerchantAccountInfoDto queryCardAccountByCardNo(String cardNo) {
        return null;
    }

    @Override
    public List<MerchantAccountInfoDto> queryAccountsByUserId(String userId, boolean includeBinded) {
        return null;
    }
}
